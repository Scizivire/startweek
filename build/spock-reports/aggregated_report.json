{"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":14,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.7543859649122807,"time":106}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.36363636363636365,"time":198}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":78}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":6}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":6}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":21}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":6}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":7}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":9,"errors":1,"skipped":0,"totalRuns":12,"successRate":0.16666666666666666,"time":43}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"successRate":0.0,"time":239}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"successRate":1.0,"time":90}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":78}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.25,"time":240}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.25,"time":213}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.5,"time":204}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.5,"time":226}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.5,"time":169}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":284}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":292}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":274}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":279}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":338}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":227}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":217}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":97}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":170}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":164}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":190}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":176}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"successRate":1.0,"time":91}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.2857142857142857,"time":84}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":6,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.14285714285714285,"time":162}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":85}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":82}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.2857142857142857,"time":85}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.42857142857142855,"time":157}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":6,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.14285714285714285,"time":150}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.42857142857142855,"time":168}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.42857142857142855,"time":160}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.42857142857142855,"time":158}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":6,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.14285714285714285,"time":161}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":6,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.14285714285714285,"time":192}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.42857142857142855,"time":160}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.42857142857142855,"time":186}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.5714285714285714,"time":91}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.5714285714285714,"time":102}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.7142857142857143,"time":112}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.8571428571428571,"time":103}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"successRate":1.0,"time":73}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"successRate":1.0,"time":92}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":14,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.7543859649122807,"time":320}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":64}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":138}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":66}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":57}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":3,"successRate":0.3333333333333333,"time":111}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":80}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":149}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":90}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":11,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.0,"time":221}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":11,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.0,"time":195}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"successRate":1.0,"time":104}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":11,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.0,"time":235}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"successRate":1.0,"time":104}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":11,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.0,"time":224}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":11,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.0,"time":223}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.42857142857142855,"time":135}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"successRate":1.0,"time":96}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":11,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.0,"time":211}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"successRate":1.0,"time":95}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":11,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.0,"time":211}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"successRate":1.0,"time":83}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":9,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.18181818181818182,"time":203}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"successRate":0.0,"time":169}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"successRate":0.0,"time":287136}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"successRate":1.0,"time":101}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":8,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.2727272727272727,"time":221}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":8,"errors":0,"skipped":0,"totalRuns":8,"successRate":0.0,"time":14966}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"successRate":0.0,"time":470446}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"successRate":1.0,"time":110}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"successRate":1.0,"time":92}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":92}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":98}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":79}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"successRate":1.0,"time":51}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":57}}}